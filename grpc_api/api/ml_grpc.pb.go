// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// FoodDetectorClient is the client API for FoodDetector service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FoodDetectorClient interface {
	Predict(ctx context.Context, in *Frames, opts ...grpc.CallOption) (*Prediction, error)
	SetClasses(ctx context.Context, in *Classes, opts ...grpc.CallOption) (*Classes, error)
}

type foodDetectorClient struct {
	cc grpc.ClientConnInterface
}

func NewFoodDetectorClient(cc grpc.ClientConnInterface) FoodDetectorClient {
	return &foodDetectorClient{cc}
}

var foodDetectorPredictStreamDesc = &grpc.StreamDesc{
	StreamName: "predict",
}

func (c *foodDetectorClient) Predict(ctx context.Context, in *Frames, opts ...grpc.CallOption) (*Prediction, error) {
	out := new(Prediction)
	err := c.cc.Invoke(ctx, "/FoodDetector/predict", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var foodDetectorSetClassesStreamDesc = &grpc.StreamDesc{
	StreamName: "set_classes",
}

func (c *foodDetectorClient) SetClasses(ctx context.Context, in *Classes, opts ...grpc.CallOption) (*Classes, error) {
	out := new(Classes)
	err := c.cc.Invoke(ctx, "/FoodDetector/set_classes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FoodDetectorService is the service API for FoodDetector service.
// Fields should be assigned to their respective handler implementations only before
// RegisterFoodDetectorService is called.  Any unassigned fields will result in the
// handler for that method returning an Unimplemented error.
type FoodDetectorService struct {
	Predict    func(context.Context, *Frames) (*Prediction, error)
	SetClasses func(context.Context, *Classes) (*Classes, error)
}

func (s *FoodDetectorService) predict(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Frames)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return s.Predict(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     s,
		FullMethod: "/FoodDetector/Predict",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.Predict(ctx, req.(*Frames))
	}
	return interceptor(ctx, in, info, handler)
}
func (s *FoodDetectorService) setClasses(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Classes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return s.SetClasses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     s,
		FullMethod: "/FoodDetector/SetClasses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.SetClasses(ctx, req.(*Classes))
	}
	return interceptor(ctx, in, info, handler)
}

// RegisterFoodDetectorService registers a service implementation with a gRPC server.
func RegisterFoodDetectorService(s grpc.ServiceRegistrar, srv *FoodDetectorService) {
	srvCopy := *srv
	if srvCopy.Predict == nil {
		srvCopy.Predict = func(context.Context, *Frames) (*Prediction, error) {
			return nil, status.Errorf(codes.Unimplemented, "method Predict not implemented")
		}
	}
	if srvCopy.SetClasses == nil {
		srvCopy.SetClasses = func(context.Context, *Classes) (*Classes, error) {
			return nil, status.Errorf(codes.Unimplemented, "method SetClasses not implemented")
		}
	}
	sd := grpc.ServiceDesc{
		ServiceName: "FoodDetector",
		Methods: []grpc.MethodDesc{
			{
				MethodName: "predict",
				Handler:    srvCopy.predict,
			},
			{
				MethodName: "set_classes",
				Handler:    srvCopy.setClasses,
			},
		},
		Streams:  []grpc.StreamDesc{},
		Metadata: "ml.proto",
	}

	s.RegisterService(&sd, nil)
}

// NewFoodDetectorService creates a new FoodDetectorService containing the
// implemented methods of the FoodDetector service in s.  Any unimplemented
// methods will result in the gRPC server returning an UNIMPLEMENTED status to the client.
// This includes situations where the method handler is misspelled or has the wrong
// signature.  For this reason, this function should be used with great care and
// is not recommended to be used by most users.
func NewFoodDetectorService(s interface{}) *FoodDetectorService {
	ns := &FoodDetectorService{}
	if h, ok := s.(interface {
		Predict(context.Context, *Frames) (*Prediction, error)
	}); ok {
		ns.Predict = h.Predict
	}
	if h, ok := s.(interface {
		SetClasses(context.Context, *Classes) (*Classes, error)
	}); ok {
		ns.SetClasses = h.SetClasses
	}
	return ns
}

// UnstableFoodDetectorService is the service API for FoodDetector service.
// New methods may be added to this interface if they are added to the service
// definition, which is not a backward-compatible change.  For this reason,
// use of this type is not recommended.
type UnstableFoodDetectorService interface {
	Predict(context.Context, *Frames) (*Prediction, error)
	SetClasses(context.Context, *Classes) (*Classes, error)
}
